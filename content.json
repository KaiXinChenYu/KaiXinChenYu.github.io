[{"title":"Asp.Net和Access数据库开发网站","date":"2017-04-18T01:10:01.000Z","path":"2017/04/18/20170418-WebApplication-WebSite/","text":"今天分享下，我前段时间花了一个星期，写的一个简单的网站，网址是：www.dongliguangyou.cn后台的数据管理基本是我开发的，前端的CSS样式借用了别人的模板。 网站内容当是一开始做这个网站的初衷是为了以后，方便分享一些东西，当时想的很多，但是实际做起来，确实碰到了很多问题，最终就做成了那个半成品。以后有空我肯定会优化那个网站，加些东西，现在基本什么都没有，数据库中就几张图片和几个作品信息。 可以在网站上找到我的联系方式 网站后台 后台可以对前台的一些数据进行管理，包括添加和删除等等，其实内部就是对数据库的增删改查。 大概就是这样吧，半成品，感觉我从来没有做过一个上的了台面的东西。有空我会发个关于使用虚拟空间和域名在网上发布网站的Blog，今天就这样吧。","tags":[{"name":"WebApplication","slug":"WebApplication","permalink":"http://KaiXinChenYu.github.io/tags/WebApplication/"}]},{"title":"使用AfterEffects替换视频天空","date":"2017-04-17T13:30:01.000Z","path":"2017/04/17/20170417-AfterEffect-SkyReplace/","text":"今天，实在事情太多了，而且最近有个开发游戏的计划，这次绝对绝对不会半路放弃了，所以就分享一个我前段时间做的关于AfterEffects的视频吧。网盘地址：http://pan.baidu.com/s/1qY57wb6","tags":[{"name":"AfterEffects","slug":"AfterEffects","permalink":"http://KaiXinChenYu.github.io/tags/AfterEffects/"}]},{"title":"Unity3D药品管理Demo","date":"2017-04-16T03:10:01.000Z","path":"2017/04/16/20170416-Unity3D-DrugManager - 副本/","text":"自己抽空，随意开发了一个，不说代码质量了，非常简单的药品管理的系统Demo，只有一部分功能，后来感觉没啥用，就放弃不搞了，简单实现了注册和登录功能，还有数据库的查找及修改。具体开发用到的软件有PhotonServer服务器框架，MySQL数据库，和Unity3D开发客户端。 Unity3D部分这部分主要是数据得显示，包括读出数据库信息显示在界面上，用户登录注册的界面显示等。更改IP可以进行局域网连接服务器，广域网没试过不知道。 PhotonServer部分这部分服务端的开发，主要通过 Visual Studio 2013 进行，在服务端连接数据库，和客户端交互。 MySQL部分这部分主要建立了几张表，用户表和药品表等。 测试部分实际测试，先打开MySQL服务，在打开photonserver服务器，最后unity中启动游戏，安卓端我也测试了下，只能说能用吧。。具体测试图如下： 大概就是一个可以简单修改数据库的软件，只不过客户端是用unity开发而已。代码比较乱，我就不分享了，网上高端物品管理系统很多很多。。","tags":[{"name":"Unity3D-Server","slug":"Unity3D-Server","permalink":"http://KaiXinChenYu.github.io/tags/Unity3D-Server/"}]},{"title":"Unity3D简易MVC框架","date":"2017-04-15T03:10:01.000Z","path":"2017/04/15/20170415-Unity3D-MVC/","text":"一个用于Unity3D游戏开发的简易MVC框架，用于开发一些小型的游戏足够了，调理很清晰。框架来源是泰课在线上NickyMa讲师的保卫萝卜中的MVC框架，个人感觉非常不错的一篇教程，有兴趣可以去看看，网址： http://www.taikr.com/course/308 ，我只是学习了一下，写这篇Blog也是为了再理一下思路和记录下来，方便以后使用。 Unity3D中的操作具体MVC的原理我就不讲了，Google一下，会有很多的介绍。直接讲代码书写，首先打开Unity3D，创建1个文件夹命名为MVC，再创建三个脚本，分别命名为Model，Controller，View。在新建一个脚本命名为MVC，用于管理Model，Controller，View这三个类，包括之间的事件发送，获取和注册。 Model： using System; using System.Collections.Generic; using System.Linq; using System.Text; public abstract class Model { public abstract string Name { get; } protected void SendEvent(string eventName, object data = null) { MVC.SendEvent(eventName,data); } } View： using System; using System.Collections.Generic; using System.Text; using UnityEngine; public abstract class View : MonoBehaviour { //视图标识 public abstract string Name { get; } //关心事件列表 public List&lt;string&gt; AttationEvents =new List&lt;string&gt;(); //事件处理函数 public abstract void HandleEvent(string eventName, object data); //获取模型 protected Model GetModel&lt;T&gt;() where T : Model { return MVC.GetModel&lt;T&gt;(); } //发送消息 protected void SendEvent(string eventName,object data=null) { MVC.SendEvent(eventName,data); } } Controller： using System; using System.Collections.Generic; using System.Linq; using System.Text; public abstract class Controller { //获取模型 protected Model GetModel&lt;T&gt;() where T : Model { return MVC.GetModel&lt;T&gt;(); } //获取视图 protected View GetView&lt;T&gt;() where T : View { return MVC.GetView&lt;T&gt;(); } protected void RegisterModel(Model model) { MVC.RegisterModel(model); } protected void RegisterView(View view) { MVC.RegisterView(view); } protected void RegisterController(string eventName, Type controllerType) { MVC.RegisterController(eventName,controllerType); } //处理系统消息 public abstract void Execute(object data); } MVC： using System; using System.Collections.Generic; using System.Linq; using System.Text; public static class MVC { //存储MVC public static Dictionary&lt;string,Model&gt; Models =new Dictionary&lt;string, Model&gt;();//名字--模型 public static Dictionary&lt;string, View&gt; Views = new Dictionary&lt;string, View&gt;();//名字--视图 public static Dictionary&lt;string, Type&gt; CommandMap = new Dictionary&lt;string, Type&gt;();//事件名字--控制器类型 //注册 public static void RegisterModel(Model model) { Models[model.Name] = model; } public static void RegisterView(View view) { Views[view.Name] = view; } public static void RegisterController(string eventName, Type controllerType) { CommandMap[eventName] = controllerType; } //获取 public static Model GetModel&lt;T&gt;() where T:Model { foreach (Model m in Models.Values) { if (m is T) { return m; } } return null; } public static View GetView&lt;T&gt;() where T:View { foreach (View v in Views.Values) { if (v is T) { return v; } } return null; } //发送事件 public static void SendEvent(string eventName, object data =null) { //控制器响应时间 if (CommandMap.ContainsKey(eventName)) { Type t = CommandMap[eventName]; Controller c = Activator.CreateInstance(t) as Controller; //控制器执行 c.Execute(data); } //视图响应事件 foreach (View v in Views.Values) { if (v.AttationEvents.Contains((eventName))) { //视图响应事件 v.HandleEvent(eventName,data); } } } } 代码的书写基本按照标题上的那张图片，今天就这么多吧，等有空，我做个Demo，讲下如何使用这个简单的MVC框架。","tags":[{"name":"Unity3D","slug":"Unity3D","permalink":"http://KaiXinChenYu.github.io/tags/Unity3D/"}]},{"title":"Unity3D单例模板--通过继承简单实现单例","date":"2017-04-14T04:10:01.000Z","path":"2017/04/14/20170414-Unity3D-Singleton/","text":"一个单例的模板，通过继承这个工具类，在Unity中轻松实现单例，不过这个单例模板还是存在一些问题，比如不适合多线程。具体较为完整的单例模式介绍，可以参考这篇文章下面这篇简书上的文章，关于Java的单例 http://www.jianshu.com/p/eb30a388c5fc ，文章将单例模式讲解的很清楚，C#的单例模式也基本差不多。 Unity3D中的操作首先打开Unity3D，创建一个类命名为Singleton,意思是单例。打开这个类填写如下代码： Singleton： using System; using UnityEngine; //定义泛型T，限定T继承自MonoBehaviour public abstract class Singleton&lt;T&gt;:MonoBehaviour where T : MonoBehaviour { private static T m_instance = null; public static T Instance { get { return m_instance; } } //调用Awake()方法，定义为虚方法，方便子类如果也需要Awake（）方法，可以复写 protected virtual void Awake() { m_instance = this as T; } } 单例模板使用方法，创建一个C#脚本，名称任意，我命名为Test，具体如下： Test： using System; using UnityEngine; public class Test : Singleton&lt;Test&gt; { //可以简单定义个方法或者属性，就可以在外部通过 //Test.Instance.属性或者方法 进行访问了 } 只是一个简单的单例模式，但是感觉在开发中，单例模式用的非常多。虽然这个模板还是存在一些不足，不过在一般情况下，肯定是够用了，而且还是很方便的，只要直接继承就行。","tags":[{"name":"Unity3D","slug":"Unity3D","permalink":"http://KaiXinChenYu.github.io/tags/Unity3D/"}]},{"title":"Photoshop动作——学习ps的GoodMethod","date":"2017-04-13T15:00:01.000Z","path":"2017/04/13/20170413-Photoshop-Action/","text":"主要是使用ps动作窗口，快速实现自己需要的效果，百度下也能找到相关类似的教程，我这主要是自己总结下，提升下自己，文章最后会分享一些我个人在网上收集的ps动作。 Ps中的操作首先打开ps，我这用的是PhotoshopCS6，使用快捷键Alt+F9或者在菜单栏的窗口（W）下拉菜单中，找到动作菜单，点击打开。在动作面板中右上方，小三角点击，选择加入动作，动作格式为.atn格式。如下图： 点击动作前的小三角，可以显示整个动作所使用的操作，可以通过一些动作，学习一些处理过程。 点击选择需要的动作，点下方的小三角，来使用动作，之后ps自动执行操作，快速的形成了各种不同的效果。 下面是一些网上的动作，百度云盘链接：链接：http://pan.baidu.com/s/1mh8MMVY 今天有点忙，只能简单简单写一下Blog了。","tags":[{"name":"Photoshop","slug":"Photoshop","permalink":"http://KaiXinChenYu.github.io/tags/Photoshop/"}]},{"title":"Unity3D简易UI框架（工具类）","date":"2017-04-12T04:35:00.000Z","path":"2017/04/12/20170412-Unity3D-UIFramework/","text":"自己参照网上的UI框架，简单改了下，并且用到了昨天的txt文本读取。只做了个简单的测试，可能存在一些问题。 工具类代码首先在Unity中新建3个C#脚本，分别命名为GameRoot，UIBase，UIManager，命名看自己喜好吧。分别如下： UIBase： using System.Collections; using System.Collections.Generic; using UnityEngine; public class UIBase : MonoBehaviour { /// &lt;summary&gt; /// 显示界面 /// &lt;/summary&gt; public virtual void DoOnEntering() { } /// &lt;summary&gt; /// 暂停界面 /// &lt;/summary&gt; public virtual void DoOnPausing() { } /// &lt;summary&gt; /// 继续界面 /// &lt;/summary&gt; public virtual void DoOnResuming() { } /// &lt;summary&gt; /// 关闭界面 /// &lt;/summary&gt; public virtual void DoOnExiting() { } } UIManager： using System.Collections; using System.Collections.Generic; using UnityEngine; public class UIManager { /// &lt;summary&gt; /// 单例模式，初始化对象 /// &lt;/summary&gt; private static UIManager _instance; public static UIManager Instance { get { if (_instance == null) { _instance = new UIManager(); } return _instance; } } //构造函数中初始化，读取UI文件夹下的所有prefabs private UIManager() { LoadAllUIPrefabs(); } /// &lt;summary&gt; /// 存放UI面板的栈 /// &lt;/summary&gt; private Stack&lt;UIBase&gt; UIPanelStack; /// &lt;summary&gt; /// 保存所有的面板 /// &lt;/summary&gt; private Dictionary&lt;string, UIBase&gt; UIPanelDict; /// &lt;summary&gt; /// 根据名字保存面板的prefab /// &lt;/summary&gt; private Dictionary&lt;string, GameObject&gt; UIPrefabDict =new Dictionary&lt;string, GameObject&gt;(); /// &lt;summary&gt; /// UI路径 /// &lt;/summary&gt; private string ResourceDir = &quot;UI&quot;; /// &lt;summary&gt; /// 把页面入栈--把页面显示在界面上 /// &lt;/summary&gt; public void PushPanel(string UIPanelName) { if (UIPanelStack == null) UIPanelStack = new Stack&lt;UIBase&gt;(); //判断一下栈里面是否有页面 if (UIPanelStack.Count &gt; 0) { UIBase topPanel = UIPanelStack.Peek(); topPanel.DoOnPausing(); } UIBase panel = GetPanel(UIPanelName); panel.DoOnEntering(); UIPanelStack.Push(panel); } /// &lt;summary&gt; /// 出栈 ，把页面从界面上移除 /// &lt;/summary&gt; public void PopPanel() { if (UIPanelStack == null) UIPanelStack = new Stack&lt;UIBase&gt;(); if (UIPanelStack.Count == 0) return; //关闭栈顶页面的显示 UIBase topPanel = UIPanelStack.Pop(); topPanel.DoOnExiting(); if (UIPanelStack.Count &gt; 0) { UIBase topPanel2 = UIPanelStack.Peek(); topPanel2.DoOnResuming(); } } /// &lt;summary&gt; /// 根据面板类型 得到实例化的面板 /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; private UIBase GetPanel(string UIPanelName) { if (UIPanelDict == null) { UIPanelDict = new Dictionary&lt;string, UIBase&gt;(); } UIBase panel; UIPanelDict.TryGetValue(UIPanelName, out panel); //如果找不到，就根据prefab去实例化面板 if (panel == null) { GameObject UIPrefab = UIPrefabDict[UIPanelName]; GameObject instPanel = GameObject.Instantiate&lt;GameObject&gt;(UIPrefab); instPanel.name = UIPanelName; UIBase UIBase = instPanel.GetComponent&lt;UIBase&gt;(); UIPanelDict.Add(UIPanelName, UIBase); return UIBase; } else { return panel; } } //加载prefab的方法，存到字典中 public void LoadAllUIPrefabs() { TextAsset ta = Resources.Load&lt;TextAsset&gt;(&quot;UIPanelInfo&quot;); string allInfo = ta.text; string[] lineInfoArray = allInfo.Split(&apos;\\n&apos;); foreach (string lineInfo in lineInfoArray) { string[] itemInfoArray = lineInfo.Split(&apos;,&apos;); foreach (string item in itemInfoArray) { string UIPath = ResourceDir + &quot;/&quot; + item; GameObject UIPrefab = Resources.Load&lt;GameObject&gt;(UIPath); if (UIPrefab) UIPrefabDict.Add(item, UIPrefab); } } } } GameRoot： using System.Collections; using System.Collections.Generic; using UnityEngine; public class GameRoot : MonoBehaviour { /// &lt;summary&gt; /// 启动初始界面,挂在游戏物体之上 /// &lt;/summary&gt; void Start () { UIManager.Instance.PushPanel(&quot;OptionPanel&quot;); } } 使用方法简单测试Demo：在Assets文件夹下新建Resources，Scripts，Scenes和UIFramework文件夹，Rescources文件夹下新建UI文件夹和UIPanelInfo.txt文件（UTF-8格式）。Hierarchy面板新建两个Canvas，改名为OptionPanel和StartPanel，在各自下面分别再建一个Panel，改改颜色大小之类的。OptionPanel下新建一个Start按钮。再新建两个脚本StartUI和OptionUI，都继承自UIBase，之后就可以复写父类的四个方法，分别可以控制UI面板的各个状态。OptionUI在添加一个点击事件–事件内容为push一个StartPanel，之后给Start按钮添加点击事件。 txt文本填写StartPanel，OptionPanel具体格式和昨天的一样，也可以选择用json之类的 上面只是试了下，因为blog实在写不了太多，太废时间了，具体怎么用，我可能会出个视频，也加强下自己对这个工具类的理解。其实如果UI面板比较少的话，没必要用框架，不过用了的话，整体确实清晰很多，也方便管理。 今天，到这了。","tags":[{"name":"Unity3D","slug":"Unity3D","permalink":"http://KaiXinChenYu.github.io/tags/Unity3D/"}]},{"title":"Unity3D数据读取--简单Txt格式读取","date":"2017-04-11T00:35:00.000Z","path":"2017/04/11/20170411-Unity3D-DataLoad/","text":"今天主要讲下我在使用Unity3D过程中，读取文件数据时一些浅显的经验，肯定有不少问题。 游戏开发过程中，如果是单机游戏，一般不包含数据库，这样导致稍微复杂的游戏将会包含大量的数据信息，包括物品，剧情，技能，人物信息等，这些数据得存储一般都会以一个外部文件进行存储，可以是Json，Xml，Excel，Txt等，这样方便管理游戏中大量的数据。这些数据将在运行游戏的时候进行读取。如果只是读取数据，那么Txt文本是不错的选择，因为Unity源生对txt支持较好，可以在组件上直接拖入。而要像数据库一样，对这些数据进行增删改查的话Json和Xml是更好的选择。 这次主要讲下读取txt文本。 数据读取步骤1.素材准备先准备一个txt文件，我这用了一个Excel文档（来源：金庸群侠传X Mod编辑器）转成txt，因为个人感觉用excel管理数据，清晰明了，如果能直接读取当然更好，但是unity本身对其的支持不是很好，虽然也可以通过插件读取，但是或多或少还有些问题。excel表先另存为转成逗号分隔符的csv格式，然后直接强制转成txt。附：excel文件地址 http://pan.baidu.com/s/1geZvqUJ 2.Unity中操作1.Hierarchy面板新建一个空的游戏物体，起名GameManager。2.Project面板新建四个文件夹备用，Scripts文件夹下，新建C#脚本InventoryInfoLoadManager和Inventory脚本，名称随意。3.将脚本挂载到GameManager上。 3.读取代码打开脚本Inventory，只读取一部分信息，编写如下代码： using System.Collections; using System.Collections.Generic; using UnityEngine; public class Inventory { //属性定义 private string name; private string des; private string talent; //封装 public string Name { get { return name; } set { name = value; } } public string Des { get { return des; } set { des = value; } } public string Talent { get { return talent; } set { talent = value; } } } 打开脚本InventoryInfoLoadManager脚本，编写如下代码： using System.Collections; using System.Collections.Generic; using UnityEngine; public class InventoryInfoLoadManager : MonoBehaviour { //单例模式 //public static InventoryInfoLoadManager _instance; //也可以用Resources.Load读取，我这就直接通过Inspector面板拖入 public TextAsset inventoryInfo; //List集合存储所有物品 public List&lt;Inventory&gt; list= new List&lt;Inventory&gt;(); //void Awake() //{ // _instance = this; //} //Start方法中读取物品信息 void Start() { ReadInfo(); foreach (Inventory inventory in list) { print(inventory.Name);//输出到控制台测试 } } //信息读取方法 void ReadInfo() { string allInfo = inventoryInfo.text; string[] lineInfoArray = allInfo.Split(&apos;\\n&apos;); foreach (string lineInfo in lineInfoArray) { string[] itemInfoArray = lineInfo.Split(&apos;,&apos;); if (itemInfoArray[0] == &quot;物品名&quot;) { } else { string name = itemInfoArray[0]; string des = itemInfoArray[1]; string talent = itemInfoArray[3]; Inventory it= new Inventory(); it.Name = name; it.Des = des; it.Talent = talent; list.Add(it); } } } } 写完代码把txt文件拖到脚本InventoryInfoLoadManager上，确保txt文本没有多余空格，且是utf-8格式，之后在控制台就能显示读取数据。到这就结束了，下面是我自己继续将信息显示到游戏物体之上，方法不好。 4.界面显示首先将InventoryInfoLoadManager中注释的单例模式取消注释，再新建两个类，InventoryManager和InventoryItem，Hierarchy面板新建grid（grid上添加GridLayouGroup脚本）用来存放物品，和item物体（item物体添加InventoryItem脚本）用来存放物品信息，get按钮添加点击事件，InventoryManager拖到GameManager游戏物体上具体如下图： InventoryItem脚本如下： using System.Collections.Generic; using UnityEngine; using UnityEngine.UI; public class InventoryItem : MonoBehaviour { //UI相关 public Text name; public Text des; public Text talent; public void UpdateInfo(string name,string des,string talent) { this.name.text = name; this.des.text = des; this.talent.text = talent; } } InventoryManager脚本如下： using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.UI; public class InventoryManager : MonoBehaviour { //网格游戏物体 public GameObject grid; //prefab public GameObject inventoryItemPrefab; //获取list中所有物品 private List&lt;Inventory&gt; list; public void OnClickLoadInventory() { list = InventoryInfoLoadManager._instance.list; foreach (Inventory inventory in list) { inventoryItemPrefab.GetComponent&lt;InventoryItem&gt;().UpdateInfo(inventory.Name,inventory.Des,inventory.Talent); GameObject iip = GameObject.Instantiate(inventoryItemPrefab) as GameObject; iip.transform.parent = grid.transform; } } } Inspector面板如下图： 最终结果图： 写完了，好艰难。。","tags":[{"name":"Unity3D","slug":"Unity3D","permalink":"http://KaiXinChenYu.github.io/tags/Unity3D/"}]},{"title":"技术之路从此开始","date":"2017-04-10T11:05:00.000Z","path":"2017/04/10/20170410-Diary-Beginning/","text":"第一次写博客，写的随意了一点，主要讲下我的经历，和今后的目标。 不知不觉从大四的时候接触java，认识到什么是真正的编程，到现在已经2年多了，而我依然还是在技术门外徘徊。本科化工自动化毕业后选择考研，然后调剂到造纸专业，当时不懂，总觉得研究生总是比本科要好吧。然后刚进去的一年真的是煎熬，什么都不懂，一切从头做起。而在这样的一个环境下，我却偏执的想做一个程序员，当第一个“Hello World”显示在屏幕上时，当第一个APK在自己手上诞生时，当第一个网站发布出来时，当第一个游戏应用在自己手上玩起来时等等，一切的一切充满了成就感，哪怕只能自己一个人分享。不可自拔的喜欢上这个二进制的世界，这个能创造一切的世界，不起眼的你，也许正用代码操控着一个世界。 不知道是不是对现实的逃避，我非常不喜欢的现在的专业，不说有没有前途，虽然造纸确实差点，但是个人感觉专业到一定的程度，每个行业都是有发展的。就说我的专业，研究生基本都是做实验，做实验肯定要化学药品，各种有毒。所以我学的可以说很不认真，大部分的时间我都用来自学一些软件，包括平面设计，三维建模和游戏制作等，也一直看编程相关的书，现在可能比较熟悉C#吧。我不知道这样做对不对，但是我的目标很明确，保证毕业的情况下，自学我喜欢的，哪怕毕业后两边都没学好，也不后悔，相信每个人心中都有一个梦想，我也有个————想开发一个完全由我原创的游戏（这其中艰难程度不多说）。 这个博客是因为加了一个群，群主提到了用hexo和github搭建博客网站，然后提到了stormzhang这个行业内高手。之后我去加了AndroidDeveloper这个微信公众号，看了stormzhang的一些文章，才发现自己与外界交流太少了，只靠自己看视频看书自学肯定不够，我在程序的门外徘徊太久了。不知道为什么，感觉这两天收获真的很大。也因为以上的原因，我决定申请个github账号，并且做一个属于自己的博客。我前段时间也买过虚拟空间和域名，并且用.net写过一个个人网站（很简陋，没啥功能，还借用了别人模板），发布到网上，有时间我还是想把博客和自己的个人网站充实起来。 定了个一年内的目标：第一，每周尽可能做三期视频，主要关于PS，AE，Unity3D的，可能算是教程？或者自己的学习之路吧。视频暂时只放到个人网站，之后看做的好再想要不要发布。第二，每天尽可能发一个博客，哪怕只是生活的琐事（尽量保证技术相关）。第三，把游戏制作，真正提上日程吧，总是三天打鱼两天晒网，永远不可能制作出游戏，更别说成功的游戏艺术。最后，每天花点时间学学英语，背背单词，或者还有其他的，反正尽可能充实自己吧。 不知道我能不能坚持下去！！","tags":[{"name":"成长之路","slug":"成长之路","permalink":"http://KaiXinChenYu.github.io/tags/成长之路/"}]}]